public class Fibonacci {

    //@ requires n >= 0;
    //@ ensures \result == -1 <==> n < 0;
    //@ ensures \result == 0 <==> n == 0;
    //@ ensures \result == \sum(0, n) <==> n > 0;
    public static int fibCompute(int n) {
        if(n < 0) return -1;
        else if(n == 0) return 0;

        int[] fib = new int[n + 1];
        fib[0] = 0;
        fib[1] = 1;
        int index = 2;

        //@ maintaining 0 <= index && index <= n + 1;
        //@ maintaining \forall int i; 0 <= i && i < index; fib[i] == \sum(0, i);
        //@ decreases n + 1 - index;
        while (index < fib.length) {
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;         
        }

        return fib[n];
    }

}
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:6: error: illegal start of type
    //@ ensures \result == \sum(0, n) <==> n > 0;
                               ^
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:6: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == \sum(0, n) <==> n > 0;
                                ^
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:17: error: illegal start of type
        //@ maintaining \forall int i; 0 <= i && i < index; fib[i] == \sum(0, i);
                                                                          ^
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:17: error: Incorrectly formed or terminated loop_invariant statement near here
        //@ maintaining \forall int i; 0 <= i && i < index; fib[i] == \sum(0, i);
                                                                           ^
4 errors

public class Fibonacci {

    //@ requires n >= 0;
    //@ ensures \result == -1 <==> n < 0;
    //@ ensures \result == 0 <==> n == 0;
    //@ ensures \result == \sum_{i=0}^{n} fib(i) <==> n > 0;
    public static int fibCompute(int n) {
        if(n < 0) return -1;
        else if(n == 0) return 0;

        int[] fib = new int[n + 1];
        fib[0] = 0;
        fib[1] = 1;
        int index = 2;

        //@ maintaining 0 <= index && index <= n + 1;
        //@ maintaining \forall int i; 0 <= i && i < index; fib[i] == fib(i);
        //@ decreases n + 1 - index;
        while (index < fib.length) {
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;         
        }

        return fib[n];
    }

    /*@ 
      @ public normal_behavior
      @ ensures fib(0) == 0;
      @ ensures fib(1) == 1;
      @ ensures fib(n) == fib(n-1) + fib(n-2) <==> n > 1;
      @*/
    public static int fib(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fib(n - 1) + fib(n - 2);
    }
}
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:6: error: This backslash token is unknown: \sum_
    //@ ensures \result == \sum_{i=0}^{n} fib(i) <==> n > 0;
                           ^
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:6: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == \sum_{i=0}^{n} fib(i) <==> n > 0;
                                ^
2 errors

public class Fibonacci {

    //@ requires n >= 0;
    //@ ensures \result == -1 <==> n < 0;
    //@ ensures \result == 0 <==> n == 0;
    //@ ensures \result == fib(n) <==> n > 0; // fib(n) is the nth Fibonacci number
    public static int fibCompute(int n) {
        if(n < 0) return -1;
        else if(n == 0) return 0;

        int[] fib = new int[n + 1];
        fib[0] = 0;
        fib[1] = 1;
        int index = 2;

        //@ maintaining 0 <= index && index <= n + 1;
        //@ maintaining \forall int i; 0 <= i && i < index; fib[i] == fib(i);
        //@ decreases n + 1 - index;
        while (index < fib.length) {
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;         
        }

        return fib[n];
    }

    /*@ 
      @ public normal_behavior
      @ ensures fib(0) == 0;
      @ ensures fib(1) == 1;
      @ ensures fib(n) == fib(n-1) + fib(n-2) <==> n > 1;
      @*/
    public static int fib(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fib(n - 1) + fib(n - 2);
    }
}
/Users/federico/Documents/codes/ufpe/Formal-Specification-with-Reasoning-LLM/tmp/Fibonacci.java:29: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
      @ ensures fib(0) == 0;
                   ^
  Reason: No logical function for method Fibonacci.fib(0) fib(int)
error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
  Reason: Unexpected exception: APPLY-HELPER java.lang.NullPointerException: Cannot assign field "type" because "e" is null
java.lang.NullPointerException: Cannot assign field "type" because "e" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:9322)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8289)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1816)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:14122)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2175)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1683)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:11011)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8289)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1816)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.ext.Arithmetic.makeBinaryOp(Arithmetic.java:263)
	at jdk.compiler/org.jmlspecs.openjml.ext.Arithmetic$Safe.rewriteBinary(Arithmetic.java:674)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:14109)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2175)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitReturn(JmlAssertionAdder.java:7413)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1728)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1480)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1247)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:18087)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1420)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:16759)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1332)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1480)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:688)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:525)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:967)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:212)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:325)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:557)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:395)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:352)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:312)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.NullPointerException: Cannot assign field "type" because "e" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:9322)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8289)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1816)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:14122)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2175)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1683)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:11011)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8289)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1816)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.ext.Arithmetic.makeBinaryOp(Arithmetic.java:263)
	at jdk.compiler/org.jmlspecs.openjml.ext.Arithmetic$Safe.rewriteBinary(Arithmetic.java:674)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:14109)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2175)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1592)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitReturn(JmlAssertionAdder.java:7413)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1728)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1480)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1247)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:18087)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1420)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:16759)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1332)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:50)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1480)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:688)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:525)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:967)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:212)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:325)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:557)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:395)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:352)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:312)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
2 errors

